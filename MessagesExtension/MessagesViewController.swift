//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Vitaliy on 10/10/16.
//  Copyright Â© 2016 Vitaliy. All rights reserved.
//

import UIKit
import Messages


extension MSMessage {
    
    func isMyMessage(conversation: MSConversation) -> Bool {
        return self.senderParticipantIdentifier == conversation.localParticipantIdentifier
    }
}

class MessagesViewController: MSMessagesAppViewController {

    override func viewDidLoad() {
        super.viewDidLoad()

        self.edgesForExtendedLayout = UIRectEdge.init(rawValue: 0)
        self.view.topAnchor.constraint(equalTo: self.topLayoutGuide.bottomAnchor).isActive = true
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
   
    fileprivate func showControler(controller: UIViewController) {
        
        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        
        controller.view.topAnchor.constraint(equalTo: self.topLayoutGuide.bottomAnchor).isActive = true
        
        //guard let presentationStyle = .activePresentationStyle else { fatalError("error") }
        //if presentationStyle == .compacts {
        //    controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        //}
        //else {
        controller.view.bottomAnchor.constraint(equalTo: self.bottomLayoutGuide.topAnchor).isActive = true
        //}
        
        controller.didMove(toParentViewController: self)
        
    }
    
    override func willBecomeActive(with conversation: MSConversation){
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        //let ctx = conversation.selectedMessage == nil ? super.context : WizardContext(message: conversation.selectedMessage)
        //nextStepViewControllerDidSubmit(context: ctx!)
        presentViewController(for: conversation, with: presentationStyle)
        print("willBecomeActive")
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        print("didResignActive")
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        print("didReceive")
        print("local:")
        print(conversation.localParticipantIdentifier)
        print("remote:")
        print(conversation.remoteParticipantIdentifiers)
        
        print("message:")
        print(message.url)
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        print("didStartSending")
        print("local:")
        print(conversation.localParticipantIdentifier)
        print("remote:")
        print(conversation.remoteParticipantIdentifiers)
        
        print("message:")
        print(message.url)
        print(message.session)
        print(message.session?.description)
        
        
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
        print("didCancelSending")
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
        
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
}

// Game
extension MessagesViewController {
    
    func loadImages() -> [GameImage] {
        
        let im1 = GameImage(imageId: UUID.init(), imageUrl: "http://thelibertarianrepublic.com/wp-content/uploads/2013/06/Screen-Shot-2013-06-23-at-10.46.30-PM-1024x638.png")
        let im2 = GameImage(imageId: UUID.init(), imageUrl: "http://i725.photobucket.com/albums/ww260/Think_Mcfly_Think/NewImage-2.jpg?__SQUARESPACE_CACHEVERSION=1280461077925")
        return [im1, im2]
    }
    
    func loadImages2(_ callback: @escaping ([GameImage]) -> Void) -> Void {
        
        var result: [GameImage] = []
        let requestURL = URL(string: "http://localhost:1337/images")
        //let urlRequest = NSMutableURLRequest(url: requestURL!)
        
        let task = URLSession.shared.dataTask(with: requestURL!, completionHandler: {
            (data, response, error) -> Void in
            
            let httpResponse = response as! HTTPURLResponse
            if (httpResponse.statusCode == 200) {
                do {
                    let json = try JSONSerialization.jsonObject(with: data!, options: JSONSerialization.ReadingOptions.allowFragments) as! Dictionary<String, Any>
                    let images = json["images"] as! [Dictionary<String, Any>]
                    for image in images {
                        let id = image["imageId"] as? String
                        let imageUrl = image["imageUrl"] as? String
                        
                        result.append(GameImage(imageId: UUID(uuidString: id!)! , imageUrl: imageUrl!))
                    }
                } catch {
                    print("Error")
                }
            }
            
            callback(result)
        })
        task.resume()
    }
    
    
    func showIntro() {
        let storyboard: UIStoryboard = UIStoryboard(name: "MainInterface", bundle: nil)
        
        let controller: GameCompactViewController = storyboard.instantiateViewController(withIdentifier: "compactGameView") as! GameCompactViewController
        
        controller.delegate = self
        loadImages2({
            (images: [GameImage]) -> Void in
            controller.images = images
            DispatchQueue.main.async {
                self.showControler(controller: controller)
            }
            
        })
    }
    
    
    func showGame(with: FMKGameRequest) {
        let storyboard: UIStoryboard = UIStoryboard(name: "MainInterface", bundle: nil)
        
        let controller: GameViewController = storyboard.instantiateViewController(withIdentifier: "gameView") as! GameViewController
        
        controller.delegate = self
        controller.request = with
        
        showControler(controller: controller)
    }
    
    func showTest(with: Questions) {
        let storyboard: UIStoryboard = UIStoryboard(name: "MainInterface", bundle: nil)
        
        let controller: VerticalSingleSelectionViewController = storyboard.instantiateViewController(withIdentifier: "verticalSingleSelectionView") as! VerticalSingleSelectionViewController
        
        //controller.delegate = self
        controller.schema = with
        
        showControler(controller: controller)
    }
    
    
    fileprivate func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        
        // Determine the controller to present.
        if presentationStyle == .compact {
            // Show a list of previously created ice creams.
            showIntro()
        }
        else {
            /*
             Parse an `IceCream` from the conversation's `selectedMessage` or
             create a new `IceCream` if there isn't one associated with the message.
             */
            let game = FMKGameRequest(message: conversation.selectedMessage)
            
            if let exist = game {
                showGame(with: exist)
            } else {
                
                let test = Questions(userIdentifier: UUID(), sessionIdentifier: UUID(), title: "I DONT KNOW WHAT TO PUT\nHERE", buttonText: "FUCK YOU!")
                test.categories = [
                    Question(code: "aaa", imageText: "DDDD FFFF wertw ertwertwe rtwertwe rtwe", imageUrl: "http://thelibertarianrepublic.com/wp-content/uploads/2013/06/Screen-Shot-2013-06-23-at-10.46.30-PM-1024x638.png"),
                    Question(code: "bbb", imageText: "DDDD\nFFFF\nwertw ertwertwe rtwertwe rtwe", imageUrl: "http://i725.photobucket.com/albums/ww260/Think_Mcfly_Think/NewImage-2.jpg?__SQUARESPACE_CACHEVERSION=1280461077925"),
                    Question(code: "ccc", imageText: "DDDD\nFFFF\nwertw ertwertwe rtwertwe rtwe", imageUrl: "http://thelibertarianrepublic.com/wp-content/uploads/2013/06/Screen-Shot-2013-06-23-at-10.46.30-PM-1024x638.png")
                ]
                
                showTest(with: test)
            }
        }
    }
}



extension MessagesViewController: GameCompactSendMessageDelegate {
    
    fileprivate func composeMessage(with game: FMKGameRequest, caption: String, session: MSSession? = nil) -> MSMessage {
        var components = URLComponents()
        components.queryItems = game.queryItems
        
        let layout = MSMessageTemplateLayout()
        layout.image = game.render()
        layout.caption = caption
        
        let message = MSMessage(session: session ?? MSSession())
        message.url = components.url!
        message.layout = layout
        
        return message
    }
    
    fileprivate func composeRequest(conversation: MSConversation, images: [GameImage]) -> FMKGameRequest {
        
        let respondents = conversation.remoteParticipantIdentifiers.flatMap({ Respondent(respondentId: $0) })
        
        return FMKGameRequest(gameId: UUID.init(), images: images, senderId: conversation.localParticipantIdentifier, respondents: respondents)
    }
    
    func sendMessage(_ controller: GameCompactViewController, images: [GameImage]) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        
        let request = composeRequest(conversation: conversation, images: images)
        
        let messageCaption = NSLocalizedString("Let's play in FMK", comment: "")
        
        let message = composeMessage(with: request, caption: messageCaption, session: conversation.selectedMessage?.session)
        
        // Add the message to the conversation.
        conversation.insert(message) { error in
            if let error = error {
                print(error)
            }
        }
        
        dismiss()
    }
}

extension MessagesViewController: GameViewControllerDelegate {
    
    fileprivate func composeMessage(with responses: RespondentResponses, caption: String, session: MSSession? = nil) -> MSMessage {
        let components = URLComponents()
        //components.queryItems = game.queryItems
        
        let layout = MSMessageTemplateLayout()
        layout.image = #imageLiteral(resourceName: "images-4.jpeg")
        layout.caption = caption
        
        let message = MSMessage(session: session ?? MSSession())
        message.url = components.url!
        message.layout = layout
        message.summaryText = caption
        
        return message
    }
    
    // Ratings are assigned by respondent
    func gameViewControllerDone(_ responses: [GameImageResponse]) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        
        let respondent = Respondent(respondentId: conversation.localParticipantIdentifier)
        let response = RespondentResponses(respondent: respondent, responses: responses)
        
        let messageCaption = NSLocalizedString("I've rated: $\(conversation.localParticipantIdentifier.uuidString)", comment: "")
        
        let message = composeMessage(with: response, caption: messageCaption, session: conversation.selectedMessage?.session)
        
        // Add the message to the conversation.
        conversation.insert(message) { error in
            if let error = error {
                print(error)
            }
        }
        
        dismiss()
    }
}

