//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Vitaliy on 10/10/16.
//  Copyright Â© 2016 Vitaliy. All rights reserved.
//

import UIKit
import Messages


extension MSMessage {
    
    func isMyMessage(conversation: MSConversation) -> Bool {
        return self.senderParticipantIdentifier == conversation.localParticipantIdentifier
    }
}

protocol CustomViewControllerDelegate: class {
    func doNextStep(_ response: ExecutionContext)
}

class MessagesViewController: MSMessagesAppViewController {

    let serverUrl = "http://192.168.8.238:1337"
    
    var context: ExecutionContext? = nil

    var currentContext: Categories? = nil
    
    var selection: [FMKGameItem] = []
    
    override func viewDidLoad() {
        super.viewDidLoad()

        self.edgesForExtendedLayout = UIRectEdge.init(rawValue: 0)
        self.view.topAnchor.constraint(equalTo: self.topLayoutGuide.bottomAnchor).isActive = true
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
   
    fileprivate func showControler(controller: UIViewController) {
        
        // Remove any existing child controllers.
        for child in childViewControllers {
            child.willMove(toParentViewController: nil)
            child.view.removeFromSuperview()
            child.removeFromParentViewController()
        }
        
        addChildViewController(controller)
        
        controller.view.frame = view.bounds
        controller.view.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(controller.view)
        
        controller.view.leftAnchor.constraint(equalTo: view.leftAnchor).isActive = true
        controller.view.rightAnchor.constraint(equalTo: view.rightAnchor).isActive = true
        
        controller.view.topAnchor.constraint(equalTo: self.topLayoutGuide.bottomAnchor).isActive = true
        
        //guard let presentationStyle = .activePresentationStyle else { fatalError("error") }
        //if presentationStyle == .compacts {
        //    controller.view.bottomAnchor.constraint(equalTo: view.bottomAnchor).isActive = true
        //}
        //else {
        controller.view.bottomAnchor.constraint(equalTo: self.bottomLayoutGuide.topAnchor).isActive = true
        //}
        
        controller.didMove(toParentViewController: self)
        
    }
    
    override func willBecomeActive(with conversation: MSConversation){

        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        print("didResignActive")
    }
    
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        print("didReceive")
        print("local:")
        print(conversation.localParticipantIdentifier)
        print("remote:")
        print(conversation.remoteParticipantIdentifiers)
        
        print("message:")
        print(message.url!)
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        print("didStartSending")
        print(conversation.remoteParticipantIdentifiers)
        
        let game = FMKGame(message: message)
        
        if let exist = game {
            exist.userIdentifier = conversation.localParticipantIdentifier
            sendStartGame(game: exist)
        }
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
        
        // Use this to clean up state related to the deleted message.
        print("didCancelSending")
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
        
        // Use this method to prepare for the change in presentation style.
        
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        
        presentViewController(for: conversation, with: presentationStyle)
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
        
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }
}


// Navigation
extension MessagesViewController : CustomViewControllerDelegate {

    
    func process(model: Categories) {
        self.currentContext = model
        
        if let model = model as? Schema {
            let storyboard: UIStoryboard = UIStoryboard(name: "MainInterface", bundle: nil)
            
            var controller: UIViewController? = nil
            if model.type == Categories.Game {
                controller = storyboard.instantiateViewController(withIdentifier: "compactGameView")
                (controller as! GameCompactViewController).sendMessageDelegate = self
                (controller as! GameCompactViewController).selection = self.selection
            } else if model.type == Categories.QuestionList {
                controller = storyboard.instantiateViewController(withIdentifier: "questionsListView")
            } else if model.type == Categories.Info {
                controller = storyboard.instantiateViewController(withIdentifier: "staticCollectionView")
            } else if model.type == Categories.QuestionButtons && model.questions.count == 3 {
                controller = storyboard.instantiateViewController(withIdentifier: "threeQuestionsView")
            } else if model.type == Categories.QuestionButtons {
                controller = storyboard.instantiateViewController(withIdentifier: "questionsCollectionView")
            } else if model.type == Categories.YesNo {
                controller = storyboard.instantiateViewController(withIdentifier: "staticYesNoView")
            } else if model.type == Categories.MiddleInfo {
                controller = storyboard.instantiateViewController(withIdentifier: "middleInfoView")
            } else if model.type == Categories.TwoQuestion {
                controller = storyboard.instantiateViewController(withIdentifier: "twoQuestionsView")
            } else if model.type == Categories.GameResult {
                controller = storyboard.instantiateViewController(withIdentifier: "gameResultView")
            } else if model.type == Categories.GameSelection {
                controller = storyboard.instantiateViewController(withIdentifier: "selectProductView")
            }
            
            if let c = controller as? BaseQuestionViewController {
                c.delegate = self
                c.schema = model
                showControler(controller: c)
            } else {
                print("Visualization type: \(model.type)")
                fatalError("Undefined case for question controller")
            }
        }
    }
    
    func process(json: Dictionary<String, Any>) {
        
        if let userIdentifierString = json["userIdentifier"] as? String, let userIdentifier = UUID(uuidString: userIdentifierString) {
            
            if let type = json["type"] as? String {
                
                let model = ModelBuilder.create(userIdentifier: userIdentifier, type: type, json: json)
                if let model = model as? Schema {
                    
                    DispatchQueue.main.async {
                        if model.isFullScreen && self.presentationStyle == .compact {
                            self.requestPresentationStyle(.expanded)
                            self.process(model: model)
                        } else if !model.isFullScreen && self.presentationStyle == .expanded {
                            self.requestPresentationStyle(.compact)
                            self.currentContext = model
                        } else {
                            self.process(model: model)
                        }
                    }
                }
            }
        }
    }
    
    func sendResponse(_ data: Data, process: @escaping (Dictionary<String, Any>) -> Void) {

        let requestURL = URL(string: "\(serverUrl)/workflow")
        var request = URLRequest(url: requestURL!)
        request.httpMethod = "POST"
        request.setValue("application/json; charset=utf-8", forHTTPHeaderField: "Content-Type")
        request.httpBody = data
        
        print("=== Request (POST): " + (requestURL?.absoluteString)!)
        
        let task = URLSession.shared.dataTask(with: request, completionHandler: {
            (data, response, error) -> Void in
            
            if let httpResponse = response as? HTTPURLResponse {
                if (httpResponse.statusCode == 200) {
                    do {
                        let json = try JSONSerialization.jsonObject(with: data!, options: JSONSerialization.ReadingOptions.allowFragments) as! Dictionary<String, Any>
                        process(json)
                    } catch {
                        print("!!!Error")
                    }
                } else {
                    print("!!!Incorrect status code: \(httpResponse.statusCode) - " + httpResponse.statusCode.description)
                }
            } else {
                print("!!!Response is null: " + error.debugDescription)
            }
        })
        task.resume()
    }
    
   /* func getCurrentStep(_ gameId: UUID, process: @escaping (Dictionary<String, Any>) -> Void) {
        
        let requestURL = URL(string: "\(serverUrl)/workflow/\(gameId.uuidString)")
        
        print("=== Request: " + (requestURL?.absoluteString)!)
        
        let task = URLSession.shared.dataTask(with: requestURL!, completionHandler: {
            (data, response, error) -> Void in
            
            if let httpResponse = response as? HTTPURLResponse {
                if (httpResponse.statusCode == 200) {
                    do {
                        let json = try JSONSerialization.jsonObject(with: data!, options: JSONSerialization.ReadingOptions.allowFragments) as! Dictionary<String, Any>
                        process(json)
                    } catch {
                        print("Error")
                    }
                }
            } else {
                print("Response is null: " + error.debugDescription)
            }
            
        })
        task.resume()
    }*/

    
    internal func doNextStep(_ response: ExecutionContext) {
        if let result = response as? Serializable {
            
            print("Next step: ")
            self.context = response
            
            if let selection = result as? FMKGame {
                self.selection = selection.getMarryKill()
                print("Selection stored: ")
            }
           
            let json = result.toJson(prettyPrinted: false)
//            let text = String(data: json!, encoding: String.Encoding(rawValue: String.Encoding.utf8.rawValue))
//            print(text!)
            sendResponse(json!, process: process)
        }
    }
    /*
    func showNextStep(_ userIdentifier: UUID) {
        
        let c = context ?? Result(userIdentifier: userIdentifier, code: "")
        
        doNextStep(c)
    }*/
    
    func showCurrentStep(_ userIdentifier: UUID, presentationStyle: MSMessagesAppPresentationStyle) {
        if let model = currentContext {
            
            if model.isFullScreen && presentationStyle == .expanded {
                print ("========= Show current step FULL: \(model.code)")
                process(model: model)
            } else if !model.isFullScreen && presentationStyle == .compact {
                print ("========= Show current step COMPACT: \(model.code)")
                process(model: model)
            }
            else {
                print ("========= Show main page")
                showMainPage(userIdentifier: userIdentifier, isBack: true)
            }
        } else {
            print ("========= Show main page")
            showMainPage(userIdentifier: userIdentifier)
        }
    }
}


// Game
extension MessagesViewController {


    func showGame(with: FMKGame) {
        let storyboard: UIStoryboard = UIStoryboard(name: "MainInterface", bundle: nil)
        
        let controller: RespondGameViewController = storyboard.instantiateViewController(withIdentifier: "gameView") as! RespondGameViewController
        
        controller.delegate = self
        controller.result = with
        
        showControler(controller: controller)
    }
    
    
    fileprivate func presentViewController(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
        
        let userId = conversation.localParticipantIdentifier
        // Determine the controller to present.
        if presentationStyle == .compact {

            showCurrentStep(userId, presentationStyle: presentationStyle)
        }
        else {
            // Url assigned to message means that it is a game with respondents
            let game = FMKGame(message: conversation.selectedMessage)
            
            if let exist = game {
                showGame(with: exist)
            } else {
                showCurrentStep(userId, presentationStyle: presentationStyle)
            }
        }
    }
}

extension MessagesViewController: GameCompactSendMessageDelegate {
    
    // Save game to server
    func sendStartGame(game: FMKGame) {
        
        let requestURL = URL(string: "\(serverUrl)/game")
        var request = URLRequest(url: requestURL!)
        request.httpMethod = "POST"
        request.setValue("application/json; charset=utf-8", forHTTPHeaderField: "Content-Type")
        request.httpBody = game.toJson()
        
        print("=== Request Game (POST): " + (requestURL?.absoluteString)!)
        
        let task = URLSession.shared.dataTask(with: request, completionHandler: {
            (data, response, error) -> Void in
            
            if let httpResponse = response as? HTTPURLResponse {
                if (httpResponse.statusCode == 200) {
                    print("!!!Game started")
                } else {
                    print("!!!Incorrect status code: \(httpResponse.statusCode) - " + httpResponse.statusCode.description)
                }
            } else {
                print("!!!Response is null: " + error.debugDescription)
            }
        })
        task.resume()
    }
    
    
    fileprivate func composeMessage(with game: FMKGame, caption: String, session: MSSession? = nil) -> MSMessage {
        var components = URLComponents()
        components.queryItems = game.queryItems
        
        let layout = MSMessageTemplateLayout()
        layout.image = game.render()
        layout.caption = caption
        
        let message = MSMessage(session: session ?? MSSession())
        message.url = components.url!
        message.layout = layout
        
        return message
    }
   
    func startGame(_ controller: GameCompactViewController, game: FMKGame) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        
        let messageCaption = NSLocalizedString(game.title!, comment: "")
        
        let message = composeMessage(with: game, caption: messageCaption, session: conversation.selectedMessage?.session)
        
        conversation.insert(message) { error in
            if let error = error {
                print(error)
            }
        }
        
        dismiss()
    }

}

extension MessagesViewController: RespondGameViewControllerDelegate {
    
    fileprivate func composeMessage(with responses: RespondentResponses, caption: String, session: MSSession? = nil) -> MSMessage {
        let components = URLComponents()
        //components.queryItems = game.queryItems
        
        let layout = MSMessageTemplateLayout()
        layout.image = #imageLiteral(resourceName: "MessageImage")
        layout.caption = caption
        
        let message = MSMessage(session: session ?? MSSession())
        message.url = components.url!
        message.layout = layout
        message.summaryText = caption
        
        return message
    }
    
    // Ratings are assigned by respondent
    func respondGame(_ gameResponse: FMKGame) {
        guard let conversation = activeConversation else { fatalError("Expected a conversation") }
        
        gameResponse.userIdentifier = conversation.localParticipantIdentifier
        
        let messageCaption = NSLocalizedString("I've rated: $\(conversation.localParticipantIdentifier.uuidString)", comment: "")
        
        let message = composeMessage(with: gameResponse, caption: messageCaption, session: conversation.selectedMessage?.session)
        
        // Add the message to the conversation.
        conversation.insert(message) { error in
            if let error = error {
                print(error)
            }
        }
        
        dismiss()
    }
}


extension MessagesViewController: ShowHistoryDelegate {
    
    // Ratings are assigned by respondent
    func showHistory(userIdentifier: UUID, item: HistoryItem?) {
        
        if let history = item {
            print("requested history" + (history.gameIdentifier.uuidString))
        }
        else {
            showCurrentStep(userIdentifier, presentationStyle: self.presentationStyle)
        }

    }
    
    func showMainPage(userIdentifier: UUID, isBack: Bool = false) {
        let storyboard: UIStoryboard = UIStoryboard(name: "MainInterface", bundle: nil)
        
        let controller: MainPageViewController = storyboard.instantiateViewController(withIdentifier: "mainPageView") as! MainPageViewController
        
        controller.delegate = self
        controller.userIdentifier = userIdentifier
        controller.buttonTitle = isBack ? "Continue" : "Select Products"
        showControler(controller: controller)
    }
}

